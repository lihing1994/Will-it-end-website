{"ast":null,"code":"var _jsxFileName = \"/Users/lihing1994/Desktop/willitend.com-home/src/components/Map.js\",\n    _s = $RefreshSig$();\n\nimport allStates from \"./allstates.json\";\nimport './Map.css';\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport WillitendService from '../services/Willitend.service.js';\nimport { geoCentroid } from \"d3-geo\";\nimport { ComposableMap, Geographies, Geography, Marker, Annotation } from \"react-simple-maps\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst geoUrl = \"https://cdn.jsdelivr.net/npm/us-atlas@3/states-10m.json\";\nconst offsets = {\n  VT: [50, -8],\n  NH: [34, 2],\n  MA: [30, -1],\n  RI: [28, 2],\n  CT: [35, 10],\n  NJ: [34, 1],\n  DE: [33, 0],\n  MD: [47, 10],\n  DC: [49, 21]\n};\n\nfunction convertRegion(input, to) {\n  var states = [['Alabama', 'AL'], ['Alaska', 'AK'], ['American Samoa', 'AS'], ['Arizona', 'AZ'], ['Arkansas', 'AR'], ['Armed Forces Americas', 'AA'], ['Armed Forces Europe', 'AE'], ['Armed Forces Pacific', 'AP'], ['California', 'CA'], ['Colorado', 'CO'], ['Connecticut', 'CT'], ['Delaware', 'DE'], ['District Of Columbia', 'DC'], ['Florida', 'FL'], ['Georgia', 'GA'], ['Guam', 'GU'], ['Hawaii', 'HI'], ['Idaho', 'ID'], ['Illinois', 'IL'], ['Indiana', 'IN'], ['Iowa', 'IA'], ['Kansas', 'KS'], ['Kentucky', 'KY'], ['Louisiana', 'LA'], ['Maine', 'ME'], ['Marshall Islands', 'MH'], ['Maryland', 'MD'], ['Massachusetts', 'MA'], ['Michigan', 'MI'], ['Minnesota', 'MN'], ['Mississippi', 'MS'], ['Missouri', 'MO'], ['Montana', 'MT'], ['Nebraska', 'NE'], ['Nevada', 'NV'], ['New Hampshire', 'NH'], ['New Jersey', 'NJ'], ['New Mexico', 'NM'], ['New York', 'NY'], ['North Carolina', 'NC'], ['North Dakota', 'ND'], ['Northern Mariana Islands', 'NP'], ['Ohio', 'OH'], ['Oklahoma', 'OK'], ['Oregon', 'OR'], ['Pennsylvania', 'PA'], ['Puerto Rico', 'PR'], ['Rhode Island', 'RI'], ['South Carolina', 'SC'], ['South Dakota', 'SD'], ['Tennessee', 'TN'], ['Texas', 'TX'], ['US Virgin Islands', 'VI'], ['Utah', 'UT'], ['Vermont', 'VT'], ['Virginia', 'VA'], ['Washington', 'WA'], ['West Virginia', 'WV'], ['Wisconsin', 'WI'], ['Wyoming', 'WY']]; // So happy that Canada and the US have distinct abbreviations\n\n  var provinces = [['Alberta', 'AB'], ['British Columbia', 'BC'], ['Manitoba', 'MB'], ['New Brunswick', 'NB'], ['Newfoundland', 'NF'], ['Northwest Territory', 'NT'], ['Nova Scotia', 'NS'], ['Nunavut', 'NU'], ['Ontario', 'ON'], ['Prince Edward Island', 'PE'], ['Quebec', 'QC'], ['Saskatchewan', 'SK'], ['Yukon', 'YT']];\n  var regions = states.concat(provinces);\n  var i;\n\n  if (to === \"to_agg\") {\n    for (i = 0; i < regions.length; i++) {\n      if (regions[i][0] === input) {\n        return regions[i][1];\n      }\n    }\n  } else if (to === \"to_name\") {\n    input = input.toUpperCase();\n\n    for (i = 0; i < regions.length; i++) {\n      if (regions[i][1] === input) {\n        return regions[i][0];\n      }\n    }\n  }\n}\n\nconst Map = ({\n  setToolTipContent,\n  statesData\n}) => {\n  _s();\n\n  const [stateInfo, setStatInfo] = useState([]);\n  useEffect(() => {\n    getStateInfo();\n  }, []);\n\n  const getStateInfo = () => {\n    WillitendService.getAllStateInfo().then(return_data => {\n      setStatInfo(return_data.data);\n    }).catch(err => alert(err));\n  };\n\n  function getStateData(id, name) {\n    /*\n    We'd get the data from the props statesData and return using id and name\n    */\n    return name;\n  }\n\n  function getStateColor(id, name) {\n    /* decide the state color using id and name and the avail datas */\n    if (name === 'California') {\n      return \"#CBC3E3\";\n    } else if (name === \"Texas\") {\n      return \"#CBC3E3\";\n    } else {\n      return \"#ECDFDC\";\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(ComposableMap, {\n      \"data-tip\": \"\",\n      projection: \"geoAlbersUsa\",\n      children: /*#__PURE__*/_jsxDEV(Geographies, {\n        geography: geoUrl,\n        children: ({\n          geographies\n        }) => /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [geographies.map(geo => /*#__PURE__*/_jsxDEV(Geography, {\n            stroke: \"white\",\n            geography: geo,\n            fill: getStateColor(geo.id, geo.properties.name),\n            \"data-tip\": true,\n            \"data-for\": geo.id,\n            onMouseEnter: () => {\n              const name = convertRegion(geo.properties.name, \"to_agg\");\n              const id = geo.id;\n              const data = getStateData(id, name);\n              {\n                console.log(agg);\n              }\n              return setToolTipContent(`<h3>${data}</h3>\n                   <p style =\"display: inline;\"><h2 style = \"display: inline;\">${id} DAYS</h2>    to Herd Immunity</p>`);\n            },\n            onMouseLeave: () => {\n              setToolTipContent(\"\");\n            },\n            style: {\n              hover: {\n                stroke: \"black\"\n              }\n            }\n          }, geo.rsmKey, false, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 14\n          }, this)), geographies.map(geo => {\n            const centroid = geoCentroid(geo);\n            const cur = allStates.find(s => s.val === geo.id);\n            return /*#__PURE__*/_jsxDEV(\"g\", {\n              children: cur && centroid[0] > -160 && centroid[0] < -67 && (Object.keys(offsets).indexOf(cur.id) === -1 ? /*#__PURE__*/_jsxDEV(Marker, {\n                coordinates: centroid,\n                children: /*#__PURE__*/_jsxDEV(\"text\", {\n                  y: \"2\",\n                  fontSize: 14,\n                  textAnchor: \"middle\",\n                  children: cur.id\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 211,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 210,\n                columnNumber: 23\n              }, this) : /*#__PURE__*/_jsxDEV(Annotation, {\n                subject: centroid,\n                dx: offsets[cur.id][0],\n                dy: offsets[cur.id][1],\n                children: /*#__PURE__*/_jsxDEV(\"text\", {\n                  x: 4,\n                  fontSize: 14,\n                  alignmentBaseline: \"middle\",\n                  children: cur.id\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 221,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 216,\n                columnNumber: 23\n              }, this))\n            }, geo.rsmKey + \"-name\", false, {\n              fileName: _jsxFileName,\n              lineNumber: 205,\n              columnNumber: 17\n            }, this);\n          })]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 166,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Map, \"wuFirWm0JpUxrH7ilk3KgxIbej8=\");\n\n_c = Map;\nexport default Map;\n\nvar _c;\n\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"sources":["/Users/lihing1994/Desktop/willitend.com-home/src/components/Map.js"],"names":["allStates","React","useState","useEffect","axios","WillitendService","geoCentroid","ComposableMap","Geographies","Geography","Marker","Annotation","geoUrl","offsets","VT","NH","MA","RI","CT","NJ","DE","MD","DC","convertRegion","input","to","states","provinces","regions","concat","i","length","toUpperCase","Map","setToolTipContent","statesData","stateInfo","setStatInfo","getStateInfo","getAllStateInfo","then","return_data","data","catch","err","alert","getStateData","id","name","getStateColor","geographies","map","geo","properties","console","log","agg","hover","stroke","rsmKey","centroid","cur","find","s","val","Object","keys","indexOf"],"mappings":"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","sourcesContent":["import allStates from \"./allstates.json\";\nimport './Map.css';\nimport React, { useState ,useEffect} from 'react';\nimport axios from 'axios';\nimport WillitendService from '../services/Willitend.service.js';\nimport { geoCentroid } from \"d3-geo\";\nimport {\n  ComposableMap,\n  Geographies,\n  Geography,\n  Marker,\n  Annotation\n} from \"react-simple-maps\";\n\nconst geoUrl = \"https://cdn.jsdelivr.net/npm/us-atlas@3/states-10m.json\";\n\nconst offsets = {\n  VT: [50, -8],\n  NH: [34, 2],\n  MA: [30, -1],\n  RI: [28, 2],\n  CT: [35, 10],\n  NJ: [34, 1],\n  DE: [33, 0],\n  MD: [47, 10],\n  DC: [49, 21]\n};\n\nfunction convertRegion(input, to) {\n  var states = [\n      ['Alabama', 'AL'],\n      ['Alaska', 'AK'],\n      ['American Samoa', 'AS'],\n      ['Arizona', 'AZ'],\n      ['Arkansas', 'AR'],\n      ['Armed Forces Americas', 'AA'],\n      ['Armed Forces Europe', 'AE'],\n      ['Armed Forces Pacific', 'AP'],\n      ['California', 'CA'],\n      ['Colorado', 'CO'],\n      ['Connecticut', 'CT'],\n      ['Delaware', 'DE'],\n      ['District Of Columbia', 'DC'],\n      ['Florida', 'FL'],\n      ['Georgia', 'GA'],\n      ['Guam', 'GU'],\n      ['Hawaii', 'HI'],\n      ['Idaho', 'ID'],\n      ['Illinois', 'IL'],\n      ['Indiana', 'IN'],\n      ['Iowa', 'IA'],\n      ['Kansas', 'KS'],\n      ['Kentucky', 'KY'],\n      ['Louisiana', 'LA'],\n      ['Maine', 'ME'],\n      ['Marshall Islands', 'MH'],\n      ['Maryland', 'MD'],\n      ['Massachusetts', 'MA'],\n      ['Michigan', 'MI'],\n      ['Minnesota', 'MN'],\n      ['Mississippi', 'MS'],\n      ['Missouri', 'MO'],\n      ['Montana', 'MT'],\n      ['Nebraska', 'NE'],\n      ['Nevada', 'NV'],\n      ['New Hampshire', 'NH'],\n      ['New Jersey', 'NJ'],\n      ['New Mexico', 'NM'],\n      ['New York', 'NY'],\n      ['North Carolina', 'NC'],\n      ['North Dakota', 'ND'],\n      ['Northern Mariana Islands', 'NP'],\n      ['Ohio', 'OH'],\n      ['Oklahoma', 'OK'],\n      ['Oregon', 'OR'],\n      ['Pennsylvania', 'PA'],\n      ['Puerto Rico', 'PR'],\n      ['Rhode Island', 'RI'],\n      ['South Carolina', 'SC'],\n      ['South Dakota', 'SD'],\n      ['Tennessee', 'TN'],\n      ['Texas', 'TX'],\n      ['US Virgin Islands', 'VI'],\n      ['Utah', 'UT'],\n      ['Vermont', 'VT'],\n      ['Virginia', 'VA'],\n      ['Washington', 'WA'],\n      ['West Virginia', 'WV'],\n      ['Wisconsin', 'WI'],\n      ['Wyoming', 'WY'],\n  ];\n\n  // So happy that Canada and the US have distinct abbreviations\n  var provinces = [\n      ['Alberta', 'AB'],\n      ['British Columbia', 'BC'],\n      ['Manitoba', 'MB'],\n      ['New Brunswick', 'NB'],\n      ['Newfoundland', 'NF'],\n      ['Northwest Territory', 'NT'],\n      ['Nova Scotia', 'NS'],\n      ['Nunavut', 'NU'],\n      ['Ontario', 'ON'],\n      ['Prince Edward Island', 'PE'],\n      ['Quebec', 'QC'],\n      ['Saskatchewan', 'SK'],\n      ['Yukon', 'YT'],\n  ];\n  var regions = states.concat(provinces);\n  var i;\n  if (to === \"to_agg\") {\n      for (i = 0; i < regions.length; i++) {\n          if (regions[i][0] === input) {\n              return (regions[i][1]);\n          }\n      }\n  } else if (to === \"to_name\") {\n      input = input.toUpperCase();\n      for (i = 0; i < regions.length; i++) {\n          if (regions[i][1] === input) {\n              return (regions[i][0]);\n          }\n      }\n  }\n}\n\n\nconst Map = ({ setToolTipContent, statesData }) => { \n  const [stateInfo, setStatInfo] = useState([]);\n\n  useEffect(() => {\n    getStateInfo();\n  }, []);\n\n  const getStateInfo = () => {\n    WillitendService.getAllStateInfo()\n    .then(return_data =>{\n      setStatInfo(return_data.data)\n    })\n    .catch(err=> alert(err));\n  };\n  function getStateData (id, name) {\n\n    /*\n    We'd get the data from the props statesData and return using id and name\n    */\n  \n    return name; \n  }\n  \nfunction getStateColor (id, name) {\n\n  /* decide the state color using id and name and the avail datas */ \n  if (name === 'California') {\n    return \"#CBC3E3\";\n  } else if (name === \"Texas\") {\n    return \"#CBC3E3\"\n  }\n  else {\n    return \"#ECDFDC\";\n  }\n\n}\n\n  return (\n    <div>\n    <ComposableMap data-tip =\"\" projection=\"geoAlbersUsa\">\n      <Geographies geography={geoUrl}>\n        {({ geographies }) => (\n          <>\n            {geographies.map(geo => (\n             \n             <Geography\n                key={geo.rsmKey}\n                stroke=\"white\"\n                geography={geo}\n\n                fill = {getStateColor(geo.id, geo.properties.name)}\n                data-tip data-for={geo.id}\n                onMouseEnter = { () => {\n\n                  const name = convertRegion(geo.properties.name,\"to_agg\"); \n                  const id = geo.id;\n                  \n                  const data = getStateData(id,name);              \n                  {console.log(agg)} \n                  return (\n                  setToolTipContent(`<h3>${data}</h3>\n                   <p style =\"display: inline;\"><h2 style = \"display: inline;\">${id} DAYS</h2>    to Herd Immunity</p>`));\n                }}\n                onMouseLeave = { () =>{\n                  setToolTipContent(\"\");\n                }}\n                style={{\n                    hover: {\n                      stroke: \"black\"\n                    }\n                  }}\n              />\n            ))}\n            {geographies.map(geo => {\n              const centroid = geoCentroid(geo);\n              const cur = allStates.find(s => s.val === geo.id);\n              return (\n                <g key={geo.rsmKey + \"-name\"}>\n                  {cur &&\n                    centroid[0] > -160 &&\n                    centroid[0] < -67 &&\n                    (Object.keys(offsets).indexOf(cur.id) === -1 ? (\n                      <Marker coordinates={centroid}>\n                        <text y=\"2\" fontSize={14} textAnchor=\"middle\">\n                          {cur.id}\n                        </text>\n                      </Marker>\n                    ) : (\n                      <Annotation\n                        subject={centroid}\n                        dx={offsets[cur.id][0]}\n                        dy={offsets[cur.id][1]}\n                      >\n                        <text x={4} fontSize={14} alignmentBaseline=\"middle\">\n                          {cur.id}\n                        </text>\n                      </Annotation>\n                    ))}\n                </g>\n              );\n            })}\n          </>\n        )}\n      </Geographies>\n    </ComposableMap>\n    </div>\n  );\n};\n\nexport default Map;"]},"metadata":{},"sourceType":"module"}