{"ast":null,"code":"/*!\r\n * Copyright (c) 2015 Sri Harsha <sri.harsha@zenq.com>\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining\r\n * a copy of this software and associated documentation files (the\r\n * \"Software\"), to deal in the Software without restriction, including\r\n * without limitation the rights to use, copy, modify, merge, publish,\r\n * distribute, sublicense, and/or sell copies of the Software, and to\r\n * permit persons to whom the Software is furnished to do so, subject to\r\n * the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be\r\n * included in all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\r\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\n(function (name, definition) {\n  if (typeof exports !== 'undefined' && typeof module !== 'undefined') {\n    module.exports = definition();\n  } else if (typeof define === 'function' && typeof define.amd === 'object') {\n    define(definition);\n  } else if (typeof define === 'function' && typeof define.petal === 'object') {\n    define(name, [], definition);\n  } else {\n    this[name] = definition();\n  }\n})('encryptjs', function (encryptjs) {\n  'use strict';\n\n  var readline = require('readline');\n\n  var fs = require('fs');\n\n  var rl; //Electron doesnt support stdin, so dont setup CLI if its not available.\n\n  try {\n    rl = readline.createInterface({\n      input: process.stdin,\n      output: process.stdout\n    });\n  } catch (e) {\n    rl = null;\n    console.log('Command line is not supported on this platform', e);\n  }\n\n  encryptjs = {\n    version: '1.0.0'\n  }; //Right before exporting the validator object, pass each of the builtins\n  //through extend() so that their first argument is coerced to a string\n\n  encryptjs.init = function () {\n    console.log(\"--------------------Applying Encryption Algorithm------------------ \");\n  };\n\n  'use strict';\n\n  if (typeof module != 'undefined' && module.exports) var Algo = require('./algo'); // CommonJS (Node.js)\n\n  encryptjs.encrypt = function (plaintext, password, nBits) {\n    var blockSize = 16; // block size fixed at 16 bytes / 128 bits (Nb=4)\n\n    if (!(nBits == 128 || nBits == 192 || nBits == 256)) return ''; // standard allows 128/192/256 bit keys\n\n    plaintext = String(plaintext).utf8Encode();\n    password = String(password).utf8Encode(); // use AES itself to encrypt password to get cipher key (using plain password as source for key\n    // expansion) - gives us well encrypted key (though hashed key might be preferred for prod'n use)\n\n    var nBytes = nBits / 8; // no bytes in key (16/24/32)\n\n    var pwBytes = new Array(nBytes);\n\n    for (var i = 0; i < nBytes; i++) {\n      // use 1st 16/24/32 chars of password for key\n      pwBytes[i] = isNaN(password.charCodeAt(i)) ? 0 : password.charCodeAt(i);\n    }\n\n    var key = Algo.cipher(pwBytes, Algo.keyExpansion(pwBytes)); // gives us 16-byte key\n\n    key = key.concat(key.slice(0, nBytes - 16)); // expand key to 16/24/32 bytes long\n    // initialise 1st 8 bytes of counter block with nonce (NIST SP800-38A ï¿½B.2): [0-1] = millisec,\n    // [2-3] = random, [4-7] = seconds, together giving full sub-millisec uniqueness up to Feb 2106\n\n    var counterBlock = new Array(blockSize);\n    var nonce = new Date().getTime(); // timestamp: milliseconds since 1-Jan-1970\n\n    var nonceMs = nonce % 1000;\n    var nonceSec = Math.floor(nonce / 1000);\n    var nonceRnd = Math.floor(Math.random() * 0xffff); // for debugging: nonce = nonceMs = nonceSec = nonceRnd = 0;\n\n    for (var i = 0; i < 2; i++) counterBlock[i] = nonceMs >>> i * 8 & 0xff;\n\n    for (var i = 0; i < 2; i++) counterBlock[i + 2] = nonceRnd >>> i * 8 & 0xff;\n\n    for (var i = 0; i < 4; i++) counterBlock[i + 4] = nonceSec >>> i * 8 & 0xff; // and convert it to a string to go on the front of the ciphertext\n\n\n    var ctrTxt = '';\n\n    for (var i = 0; i < 8; i++) ctrTxt += String.fromCharCode(counterBlock[i]); // generate key schedule - an expansion of the key into distinct Key Rounds for each round\n\n\n    var keySchedule = Algo.keyExpansion(key);\n    var blockCount = Math.ceil(plaintext.length / blockSize);\n    var ciphertxt = new Array(blockCount); // ciphertext as array of strings\n\n    for (var b = 0; b < blockCount; b++) {\n      // set counter (block #) in last 8 bytes of counter block (leaving nonce in 1st 8 bytes)\n      // done in two stages for 32-bit ops: using two words allows us to go past 2^32 blocks (68GB)\n      for (var c = 0; c < 4; c++) counterBlock[15 - c] = b >>> c * 8 & 0xff;\n\n      for (var c = 0; c < 4; c++) counterBlock[15 - c - 4] = b / 0x100000000 >>> c * 8;\n\n      var cipherCntr = Algo.cipher(counterBlock, keySchedule); // -- encrypt counter block --\n      // block size is reduced on final block\n\n      var blockLength = b < blockCount - 1 ? blockSize : (plaintext.length - 1) % blockSize + 1;\n      var cipherChar = new Array(blockLength);\n\n      for (var i = 0; i < blockLength; i++) {\n        // -- xor plaintext with ciphered counter char-by-char --\n        cipherChar[i] = cipherCntr[i] ^ plaintext.charCodeAt(b * blockSize + i);\n        cipherChar[i] = String.fromCharCode(cipherChar[i]);\n      }\n\n      ciphertxt[b] = cipherChar.join('');\n    } // use Array.join() for better performance than repeated string appends\n\n\n    var ciphertext = ctrTxt + ciphertxt.join('');\n    ciphertext = ciphertext.base64Encode();\n    return ciphertext;\n  };\n\n  encryptjs.decrypt = function (ciphertext, password, nBits) {\n    var blockSize = 16; // block size fixed at 16 bytes / 128 bits (Nb=4) for AES\n\n    if (!(nBits == 128 || nBits == 192 || nBits == 256)) return ''; // standard allows 128/192/256 bit keys\n\n    ciphertext = String(ciphertext).base64Decode();\n    password = String(password).utf8Encode(); // use AES to encrypt password (mirroring encrypt routine)\n\n    var nBytes = nBits / 8; // no bytes in key\n\n    var pwBytes = new Array(nBytes);\n\n    for (var i = 0; i < nBytes; i++) {\n      pwBytes[i] = isNaN(password.charCodeAt(i)) ? 0 : password.charCodeAt(i);\n    }\n\n    var key = Algo.cipher(pwBytes, Algo.keyExpansion(pwBytes));\n    key = key.concat(key.slice(0, nBytes - 16)); // expand key to 16/24/32 bytes long\n    // recover nonce from 1st 8 bytes of ciphertext\n\n    var counterBlock = new Array(8);\n    var ctrTxt = ciphertext.slice(0, 8);\n\n    for (var i = 0; i < 8; i++) counterBlock[i] = ctrTxt.charCodeAt(i); // generate key schedule\n\n\n    var keySchedule = Algo.keyExpansion(key); // separate ciphertext into blocks (skipping past initial 8 bytes)\n\n    var nBlocks = Math.ceil((ciphertext.length - 8) / blockSize);\n    var ct = new Array(nBlocks);\n\n    for (var b = 0; b < nBlocks; b++) ct[b] = ciphertext.slice(8 + b * blockSize, 8 + b * blockSize + blockSize);\n\n    ciphertext = ct; // ciphertext is now array of block-length strings\n    // plaintext will get generated block-by-block into array of block-length strings\n\n    var plaintxt = new Array(ciphertext.length);\n\n    for (var b = 0; b < nBlocks; b++) {\n      // set counter (block #) in last 8 bytes of counter block (leaving nonce in 1st 8 bytes)\n      for (var c = 0; c < 4; c++) counterBlock[15 - c] = b >>> c * 8 & 0xff;\n\n      for (var c = 0; c < 4; c++) counterBlock[15 - c - 4] = (b + 1) / 0x100000000 - 1 >>> c * 8 & 0xff;\n\n      var cipherCntr = Algo.cipher(counterBlock, keySchedule); // encrypt counter block\n\n      var plaintxtByte = new Array(ciphertext[b].length);\n\n      for (var i = 0; i < ciphertext[b].length; i++) {\n        // -- xor plaintxt with ciphered counter byte-by-byte --\n        plaintxtByte[i] = cipherCntr[i] ^ ciphertext[b].charCodeAt(i);\n        plaintxtByte[i] = String.fromCharCode(plaintxtByte[i]);\n      }\n\n      plaintxt[b] = plaintxtByte.join('');\n    } // join array of blocks into single plaintext string\n\n\n    var plaintext = plaintxt.join('');\n    plaintext = plaintext.utf8Decode(); // decode from UTF8 back to Unicode multi-byte chars\n\n    return plaintext;\n  };\n\n  encryptjs.getTextEncryptAndSaveToTextFile = function (filePath, password, nBits) {\n    if (!rl) throw Error(\"Command line not supported on this platform\");\n    rl.question(\"Enter the text to be encrypted: \", function (answer) {\n      // TODO: Log the answer in a database\n      console.log(\"'\" + answer + \"' This text will be encrypted and stored in a text file 'encrypted.txt'\");\n      var cipherText = encryptjs.encrypt(answer, password, nBits);\n      fs.writeFile(filePath, cipherText, function () {\n        console.log(\"'encrypted.txt' File created in your local directory, if not present refresh your project\");\n      });\n      rl.close();\n    });\n  };\n\n  encryptjs.getTextEncryptAndSaveToJSONFile = function (filePath, password, nBits) {\n    if (!rl) throw Error(\"Command line not supported on this platform\");\n    rl.question(\"Enter the text to be encrypted: \", function (answer) {\n      // TODO: Log the answer in a database\n      console.log(\"'\" + answer + \"' This text will be encrypted and stored in a text file 'encrypted.txt'\");\n      var cipherText = encryptjs.encrypt(answer, password, nBits);\n      encryptjs.writeCipherTextToJSON(filePath, {\n        EncryptedText: cipherText\n      }, function () {\n        console.log(\"'encryptedText.JSON' File created in your local directory, if not present refresh your project\");\n      });\n      rl.close();\n    });\n  };\n\n  encryptjs.writeCipherTextToJSON = function (file, obj, options, callback) {\n    if (callback == null) {\n      callback = options;\n      options = {};\n    }\n\n    var spaces = typeof options === 'object' && options !== null ? 'spaces' in options ? options.spaces : this.spaces : this.spaces;\n    var str = '';\n\n    try {\n      str = JSON.stringify(obj, options ? options.replacer : null, spaces) + '\\n';\n    } catch (err) {\n      if (callback) return callback(err, null);\n    }\n\n    fs.writeFile(file, str, options, callback);\n  };\n\n  if (typeof String.prototype.utf8Encode == 'undefined') {\n    String.prototype.utf8Encode = function () {\n      return unescape(encodeURIComponent(this));\n    };\n  }\n\n  if (typeof String.prototype.utf8Decode == 'undefined') {\n    String.prototype.utf8Decode = function () {\n      try {\n        return decodeURIComponent(escape(this));\n      } catch (e) {\n        return this; // invalid UTF-8? return as-is\n      }\n    };\n  }\n\n  if (typeof String.prototype.base64Encode == 'undefined') {\n    String.prototype.base64Encode = function () {\n      if (typeof btoa != 'undefined') return btoa(this); // browser\n\n      if (typeof Buffer != 'undefined') return new Buffer(this, 'utf8').toString('base64'); // Node.js\n\n      throw new Error('No Base64 Encode');\n    };\n  }\n\n  if (typeof String.prototype.base64Decode == 'undefined') {\n    String.prototype.base64Decode = function () {\n      if (typeof atob != 'undefined') return atob(this); // browser\n\n      if (typeof Buffer != 'undefined') return new Buffer(this, 'base64').toString('utf8'); // Node.js\n\n      throw new Error('No Base64 Decode');\n    };\n  }\n\n  encryptjs.init();\n  return encryptjs;\n});","map":{"version":3,"sources":["/Users/lihing1994/Desktop/willitend.com-home/node_modules/encryptjs/encryptjs.js"],"names":["name","definition","exports","module","define","amd","petal","encryptjs","readline","require","fs","rl","createInterface","input","process","stdin","output","stdout","e","console","log","version","init","Algo","encrypt","plaintext","password","nBits","blockSize","String","utf8Encode","nBytes","pwBytes","Array","i","isNaN","charCodeAt","key","cipher","keyExpansion","concat","slice","counterBlock","nonce","Date","getTime","nonceMs","nonceSec","Math","floor","nonceRnd","random","ctrTxt","fromCharCode","keySchedule","blockCount","ceil","length","ciphertxt","b","c","cipherCntr","blockLength","cipherChar","join","ciphertext","base64Encode","decrypt","base64Decode","nBlocks","ct","plaintxt","plaintxtByte","utf8Decode","getTextEncryptAndSaveToTextFile","filePath","Error","question","answer","cipherText","writeFile","close","getTextEncryptAndSaveToJSONFile","writeCipherTextToJSON","EncryptedText","file","obj","options","callback","spaces","str","JSON","stringify","replacer","err","prototype","unescape","encodeURIComponent","decodeURIComponent","escape","btoa","Buffer","toString","atob"],"mappings":"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","sourcesContent":["/*!\r\n * Copyright (c) 2015 Sri Harsha <sri.harsha@zenq.com>\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining\r\n * a copy of this software and associated documentation files (the\r\n * \"Software\"), to deal in the Software without restriction, including\r\n * without limitation the rights to use, copy, modify, merge, publish,\r\n * distribute, sublicense, and/or sell copies of the Software, and to\r\n * permit persons to whom the Software is furnished to do so, subject to\r\n * the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be\r\n * included in all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\r\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n\r\n(function (name, definition) {\r\n    if (typeof exports !== 'undefined' && typeof module !== 'undefined') {\r\n        module.exports = definition();\r\n    } else if (typeof define === 'function' && typeof define.amd === 'object') {\r\n        define(definition);\r\n    } else if (typeof define === 'function' && typeof define.petal === 'object') {\r\n        define(name, [], definition);\r\n    } else {\r\n        this[name] = definition();\r\n    }\r\n})('encryptjs', function (encryptjs) {\r\n\r\n    'use strict';\r\n    var readline = require('readline');\r\n    var fs=require('fs');\r\n    var rl;\r\n    //Electron doesnt support stdin, so dont setup CLI if its not available.\r\n    try {\r\n        rl = readline.createInterface({\r\n            input: process.stdin,\r\n            output: process.stdout\r\n\t\t\t  });\r\n    } catch (e) {\r\n        rl = null;\r\n        console.log('Command line is not supported on this platform', e);\r\n    }\r\n    encryptjs = { version: '1.0.0' };\r\n\r\n    //Right before exporting the validator object, pass each of the builtins\r\n    //through extend() so that their first argument is coerced to a string\r\n    encryptjs.init = function () {\r\n        console.log(\"--------------------Applying Encryption Algorithm------------------ \");\r\n    };\r\n    'use strict';\r\n    if (typeof module!='undefined' && module.exports) var Algo = require('./algo'); // CommonJS (Node.js)\r\n\r\n    encryptjs.encrypt = function(plaintext, password, nBits) {\r\n        var blockSize = 16;  // block size fixed at 16 bytes / 128 bits (Nb=4)\r\n        if (!(nBits==128 || nBits==192 || nBits==256)) return ''; // standard allows 128/192/256 bit keys\r\n        plaintext = String(plaintext).utf8Encode();\r\n        password = String(password).utf8Encode();\r\n\r\n        // use AES itself to encrypt password to get cipher key (using plain password as source for key\r\n        // expansion) - gives us well encrypted key (though hashed key might be preferred for prod'n use)\r\n        var nBytes = nBits/8;  // no bytes in key (16/24/32)\r\n        var pwBytes = new Array(nBytes);\r\n        for (var i=0; i<nBytes; i++) {  // use 1st 16/24/32 chars of password for key\r\n            pwBytes[i] = isNaN(password.charCodeAt(i)) ? 0 : password.charCodeAt(i);\r\n        }\r\n        var key = Algo.cipher(pwBytes, Algo.keyExpansion(pwBytes)); // gives us 16-byte key\r\n        key = key.concat(key.slice(0, nBytes-16));  // expand key to 16/24/32 bytes long\r\n\r\n        // initialise 1st 8 bytes of counter block with nonce (NIST SP800-38A ï¿½B.2): [0-1] = millisec,\r\n        // [2-3] = random, [4-7] = seconds, together giving full sub-millisec uniqueness up to Feb 2106\r\n        var counterBlock = new Array(blockSize);\r\n\r\n        var nonce = (new Date()).getTime();  // timestamp: milliseconds since 1-Jan-1970\r\n        var nonceMs = nonce%1000;\r\n        var nonceSec = Math.floor(nonce/1000);\r\n        var nonceRnd = Math.floor(Math.random()*0xffff);\r\n        // for debugging: nonce = nonceMs = nonceSec = nonceRnd = 0;\r\n\r\n        for (var i=0; i<2; i++) counterBlock[i]   = (nonceMs  >>> i*8) & 0xff;\r\n        for (var i=0; i<2; i++) counterBlock[i+2] = (nonceRnd >>> i*8) & 0xff;\r\n        for (var i=0; i<4; i++) counterBlock[i+4] = (nonceSec >>> i*8) & 0xff;\r\n\r\n        // and convert it to a string to go on the front of the ciphertext\r\n        var ctrTxt = '';\r\n        for (var i=0; i<8; i++) ctrTxt += String.fromCharCode(counterBlock[i]);\r\n\r\n        // generate key schedule - an expansion of the key into distinct Key Rounds for each round\r\n        var keySchedule = Algo.keyExpansion(key);\r\n\r\n        var blockCount = Math.ceil(plaintext.length/blockSize);\r\n        var ciphertxt = new Array(blockCount);  // ciphertext as array of strings\r\n\r\n        for (var b=0; b<blockCount; b++) {\r\n            // set counter (block #) in last 8 bytes of counter block (leaving nonce in 1st 8 bytes)\r\n            // done in two stages for 32-bit ops: using two words allows us to go past 2^32 blocks (68GB)\r\n            for (var c=0; c<4; c++) counterBlock[15-c] = (b >>> c*8) & 0xff;\r\n            for (var c=0; c<4; c++) counterBlock[15-c-4] = (b/0x100000000 >>> c*8);\r\n\r\n            var cipherCntr = Algo.cipher(counterBlock, keySchedule);  // -- encrypt counter block --\r\n\r\n            // block size is reduced on final block\r\n            var blockLength = b<blockCount-1 ? blockSize : (plaintext.length-1)%blockSize+1;\r\n            var cipherChar = new Array(blockLength);\r\n\r\n            for (var i=0; i<blockLength; i++) {  // -- xor plaintext with ciphered counter char-by-char --\r\n                cipherChar[i] = cipherCntr[i] ^ plaintext.charCodeAt(b*blockSize+i);\r\n                cipherChar[i] = String.fromCharCode(cipherChar[i]);\r\n            }\r\n            ciphertxt[b] = cipherChar.join('');\r\n        }\r\n\r\n        // use Array.join() for better performance than repeated string appends\r\n        var ciphertext = ctrTxt + ciphertxt.join('');\r\n        ciphertext = ciphertext.base64Encode();\r\n\r\n        return ciphertext;\r\n    };\r\n\r\n    encryptjs.decrypt = function(ciphertext, password, nBits) {\r\n        var blockSize = 16;  // block size fixed at 16 bytes / 128 bits (Nb=4) for AES\r\n        if (!(nBits==128 || nBits==192 || nBits==256)) return ''; // standard allows 128/192/256 bit keys\r\n        ciphertext = String(ciphertext).base64Decode();\r\n        password = String(password).utf8Encode();\r\n\r\n        // use AES to encrypt password (mirroring encrypt routine)\r\n        var nBytes = nBits/8;  // no bytes in key\r\n        var pwBytes = new Array(nBytes);\r\n        for (var i=0; i<nBytes; i++) {\r\n            pwBytes[i] = isNaN(password.charCodeAt(i)) ? 0 : password.charCodeAt(i);\r\n        }\r\n        var key = Algo.cipher(pwBytes, Algo.keyExpansion(pwBytes));\r\n        key = key.concat(key.slice(0, nBytes-16));  // expand key to 16/24/32 bytes long\r\n\r\n        // recover nonce from 1st 8 bytes of ciphertext\r\n        var counterBlock = new Array(8);\r\n        var ctrTxt = ciphertext.slice(0, 8);\r\n        for (var i=0; i<8; i++) counterBlock[i] = ctrTxt.charCodeAt(i);\r\n\r\n        // generate key schedule\r\n        var keySchedule = Algo.keyExpansion(key);\r\n\r\n        // separate ciphertext into blocks (skipping past initial 8 bytes)\r\n        var nBlocks = Math.ceil((ciphertext.length-8) / blockSize);\r\n        var ct = new Array(nBlocks);\r\n        for (var b=0; b<nBlocks; b++) ct[b] = ciphertext.slice(8+b*blockSize, 8+b*blockSize+blockSize);\r\n        ciphertext = ct;  // ciphertext is now array of block-length strings\r\n\r\n        // plaintext will get generated block-by-block into array of block-length strings\r\n        var plaintxt = new Array(ciphertext.length);\r\n\r\n        for (var b=0; b<nBlocks; b++) {\r\n            // set counter (block #) in last 8 bytes of counter block (leaving nonce in 1st 8 bytes)\r\n            for (var c=0; c<4; c++) counterBlock[15-c] = ((b) >>> c*8) & 0xff;\r\n            for (var c=0; c<4; c++) counterBlock[15-c-4] = (((b+1)/0x100000000-1) >>> c*8) & 0xff;\r\n\r\n            var cipherCntr = Algo.cipher(counterBlock, keySchedule);  // encrypt counter block\r\n\r\n            var plaintxtByte = new Array(ciphertext[b].length);\r\n            for (var i=0; i<ciphertext[b].length; i++) {\r\n                // -- xor plaintxt with ciphered counter byte-by-byte --\r\n                plaintxtByte[i] = cipherCntr[i] ^ ciphertext[b].charCodeAt(i);\r\n                plaintxtByte[i] = String.fromCharCode(plaintxtByte[i]);\r\n            }\r\n            plaintxt[b] = plaintxtByte.join('');\r\n        }\r\n\r\n        // join array of blocks into single plaintext string\r\n        var plaintext = plaintxt.join('');\r\n        plaintext = plaintext.utf8Decode();  // decode from UTF8 back to Unicode multi-byte chars\r\n\r\n        return plaintext;\r\n    };\r\n\r\n    encryptjs.getTextEncryptAndSaveToTextFile = function(filePath,password,nBits) {\r\n        if (!rl) throw Error(\"Command line not supported on this platform\");\r\n        rl.question(\"Enter the text to be encrypted: \", function(answer) {\r\n            // TODO: Log the answer in a database\r\n            console.log(\"'\"+answer+\"' This text will be encrypted and stored in a text file 'encrypted.txt'\");\r\n           var cipherText=encryptjs.encrypt(answer,password,nBits);\r\n            fs.writeFile(filePath,cipherText,function(){\r\n                console.log(\"'encrypted.txt' File created in your local directory, if not present refresh your project\");\r\n            });\r\n            rl.close();\r\n        });\r\n    };\r\n\r\n    encryptjs.getTextEncryptAndSaveToJSONFile = function(filePath,password,nBits) {\r\n        if (!rl) throw Error(\"Command line not supported on this platform\");\r\n        rl.question(\"Enter the text to be encrypted: \", function(answer) {\r\n            // TODO: Log the answer in a database\r\n            console.log(\"'\"+answer+\"' This text will be encrypted and stored in a text file 'encrypted.txt'\");\r\n            var cipherText=encryptjs.encrypt(answer,password,nBits);\r\n            encryptjs.writeCipherTextToJSON(filePath,{EncryptedText:cipherText},function(){\r\n                console.log(\"'encryptedText.JSON' File created in your local directory, if not present refresh your project\");\r\n            });\r\n            rl.close();\r\n        });\r\n    };\r\n\r\n    encryptjs.writeCipherTextToJSON=function(file, obj, options, callback) {\r\n        if (callback == null) {\r\n            callback = options;\r\n            options = {}\r\n        }\r\n\r\n        var spaces = typeof options === 'object' && options !== null\r\n            ? 'spaces' in options\r\n            ? options.spaces : this.spaces\r\n            : this.spaces;\r\n\r\n        var str = '';\r\n        try {\r\n            str = JSON.stringify(obj, options ? options.replacer : null, spaces) + '\\n'\r\n        } catch (err) {\r\n            if (callback) return callback(err, null)\r\n        }\r\n\r\n        fs.writeFile(file, str, options, callback)\r\n    };\r\n\r\n    if (typeof String.prototype.utf8Encode == 'undefined') {\r\n        String.prototype.utf8Encode = function() {\r\n            return unescape( encodeURIComponent( this ) );\r\n        };\r\n    }\r\n\r\n    if (typeof String.prototype.utf8Decode == 'undefined') {\r\n        String.prototype.utf8Decode = function() {\r\n            try {\r\n                return decodeURIComponent( escape( this ) );\r\n            } catch (e) {\r\n                return this; // invalid UTF-8? return as-is\r\n            }\r\n        };\r\n    }\r\n\r\n    if (typeof String.prototype.base64Encode == 'undefined') {\r\n        String.prototype.base64Encode = function() {\r\n            if (typeof btoa != 'undefined') return btoa(this); // browser\r\n            if (typeof Buffer != 'undefined') return new Buffer(this, 'utf8').toString('base64'); // Node.js\r\n            throw new Error('No Base64 Encode');\r\n        };\r\n    }\r\n\r\n    if (typeof String.prototype.base64Decode == 'undefined') {\r\n        String.prototype.base64Decode = function() {\r\n            if (typeof atob != 'undefined') return atob(this); // browser\r\n            if (typeof Buffer != 'undefined') return new Buffer(this, 'base64').toString('utf8'); // Node.js\r\n            throw new Error('No Base64 Decode');\r\n        };\r\n    }\r\n\r\n    encryptjs.init();\r\n\r\n    return encryptjs;\r\n\r\n});\r\n"]},"metadata":{},"sourceType":"script"}