{"ast":null,"code":"var _jsxFileName = \"/Users/lihing1994/Desktop/willitend.com-home/src/components/Map.js\",\n    _s = $RefreshSig$();\n\nimport allStates from \"./allstates.json\";\nimport './Map.css';\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport StateService from './StateService';\nimport { geoCentroid } from \"d3-geo\";\nimport { ComposableMap, Geographies, Geography, Marker, Annotation } from \"react-simple-maps\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst geoUrl = \"https://cdn.jsdelivr.net/npm/us-atlas@3/states-10m.json\";\nconst offsets = {\n  VT: [50, -8],\n  NH: [34, 2],\n  MA: [30, -1],\n  RI: [28, 2],\n  CT: [35, 10],\n  NJ: [34, 1],\n  DE: [33, 0],\n  MD: [47, 10],\n  DC: [49, 21]\n};\n\nconst Map = ({\n  setToolTipContent,\n  statesData\n}) => {\n  _s();\n\n  const [stateInfo, setStateInfo] = useState([]);\n\n  function getStateData() {\n    StateService.getStateInfoFromDataBase(reponse => {\n      setStateInfo(reponse.data);\n    });\n\n    for (var i = 0; i < stateInfo.length; i++) {\n      alert(stateInfo[i].id);\n    }\n  }\n\n  function getStateColor(id, name) {\n    /* decide the state color using id and name and the avail datas */\n    if (name === 'California') {\n      return \"#CBC3E3\";\n    } else if (name === \"Texas\") {\n      return \"#CBC3E3\";\n    } else {\n      return \"#ECDFDC\";\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(ComposableMap, {\n    \"data-tip\": \"\",\n    projection: \"geoAlbersUsa\",\n    children: /*#__PURE__*/_jsxDEV(Geographies, {\n      geography: geoUrl,\n      children: ({\n        geographies\n      }) => /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [geographies.map(geo => /*#__PURE__*/_jsxDEV(Geography, {\n          stroke: \"white\",\n          geography: geo,\n          fill: getStateColor(geo.id, geo.properties.name),\n          \"data-tip\": true,\n          \"data-for\": geo.id,\n          onMouseEnter: () => {\n            const name = geo.properties.name;\n            const id = geo.id;\n            const data = getStateData(id, name);\n            return setToolTipContent(`<h3>${data}</h3>\n                   <p style =\"display: inline;\"><h2 style = \"display: inline;\">${id} DAYS</h2>    to Herd Immunity</p>`);\n          },\n          onMouseLeave: () => {\n            setToolTipContent(\"\");\n          },\n          style: {\n            hover: {\n              stroke: \"black\"\n            }\n          }\n        }, geo.rsmKey, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 14\n        }, this)), geographies.map(geo => {\n          const centroid = geoCentroid(geo);\n          const cur = allStates.find(s => s.val === geo.id);\n          return /*#__PURE__*/_jsxDEV(\"g\", {\n            children: cur && centroid[0] > -160 && centroid[0] < -67 && (Object.keys(offsets).indexOf(cur.id) === -1 ? /*#__PURE__*/_jsxDEV(Marker, {\n              coordinates: centroid,\n              children: /*#__PURE__*/_jsxDEV(\"text\", {\n                y: \"2\",\n                fontSize: 14,\n                textAnchor: \"middle\",\n                children: cur.id\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 99,\n                columnNumber: 25\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 23\n            }, this) : /*#__PURE__*/_jsxDEV(Annotation, {\n              subject: centroid,\n              dx: offsets[cur.id][0],\n              dy: offsets[cur.id][1],\n              children: /*#__PURE__*/_jsxDEV(\"text\", {\n                x: 4,\n                fontSize: 14,\n                alignmentBaseline: \"middle\",\n                children: cur.id\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 109,\n                columnNumber: 25\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 23\n            }, this))\n          }, geo.rsmKey + \"-name\", false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 17\n          }, this);\n        })]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Map, \"i27uKpzDXOAviKwxxJvb/5t+awo=\");\n\n_c = Map;\nexport default Map;\n\nvar _c;\n\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"sources":["/Users/lihing1994/Desktop/willitend.com-home/src/components/Map.js"],"names":["allStates","React","useState","axios","StateService","geoCentroid","ComposableMap","Geographies","Geography","Marker","Annotation","geoUrl","offsets","VT","NH","MA","RI","CT","NJ","DE","MD","DC","Map","setToolTipContent","statesData","stateInfo","setStateInfo","getStateData","getStateInfoFromDataBase","reponse","data","i","length","alert","id","getStateColor","name","geographies","map","geo","properties","hover","stroke","rsmKey","centroid","cur","find","s","val","Object","keys","indexOf"],"mappings":"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","sourcesContent":["import allStates from \"./allstates.json\";\nimport './Map.css';\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport StateService from './StateService';\nimport { geoCentroid } from \"d3-geo\";\nimport {\n  ComposableMap,\n  Geographies,\n  Geography,\n  Marker,\n  Annotation\n} from \"react-simple-maps\";\n\nconst geoUrl = \"https://cdn.jsdelivr.net/npm/us-atlas@3/states-10m.json\";\n\nconst offsets = {\n  VT: [50, -8],\n  NH: [34, 2],\n  MA: [30, -1],\n  RI: [28, 2],\n  CT: [35, 10],\n  NJ: [34, 1],\n  DE: [33, 0],\n  MD: [47, 10],\n  DC: [49, 21]\n};\n\nconst Map = ({ setToolTipContent, statesData }) => { \n  const [stateInfo, setStateInfo] = useState([]);\n  function getStateData () {\n    StateService.getStateInfoFromDataBase((reponse)  => {\n        setStateInfo(reponse.data)\n    });\n    for(var i =0;i<stateInfo.length;i++){\n      alert(stateInfo[i].id)\n    }\n  }\n\nfunction getStateColor (id, name) {\n\n  /* decide the state color using id and name and the avail datas */ \n  if (name === 'California') {\n    return \"#CBC3E3\";\n  } else if (name === \"Texas\") {\n    return \"#CBC3E3\"\n  }\n  else {\n    return \"#ECDFDC\";\n  }\n\n}\n\n  return (\n    <ComposableMap data-tip =\"\" projection=\"geoAlbersUsa\">\n      <Geographies geography={geoUrl}>\n        {({ geographies }) => (\n          <>\n            {geographies.map(geo => (\n             \n             <Geography\n                key={geo.rsmKey}\n                stroke=\"white\"\n                geography={geo}\n\n                fill = {getStateColor(geo.id, geo.properties.name)}\n                data-tip data-for={geo.id}\n                onMouseEnter = { () => {\n\n                  const name = geo.properties.name; \n                  const id = geo.id; \n                  \n                  const data = getStateData(id, name);                 \n\n                  return (\n                  setToolTipContent(`<h3>${data}</h3>\n                   <p style =\"display: inline;\"><h2 style = \"display: inline;\">${id} DAYS</h2>    to Herd Immunity</p>`));\n                }}\n                onMouseLeave = { () =>{\n                  setToolTipContent(\"\");\n                }}\n                style={{\n                    hover: {\n                      stroke: \"black\"\n                    }\n                  }}\n              />\n            ))}\n            {geographies.map(geo => {\n              const centroid = geoCentroid(geo);\n              const cur = allStates.find(s => s.val === geo.id);\n              return (\n                <g key={geo.rsmKey + \"-name\"}>\n                  {cur &&\n                    centroid[0] > -160 &&\n                    centroid[0] < -67 &&\n                    (Object.keys(offsets).indexOf(cur.id) === -1 ? (\n                      <Marker coordinates={centroid}>\n                        <text y=\"2\" fontSize={14} textAnchor=\"middle\">\n                          {cur.id}\n                        </text>\n                      </Marker>\n                    ) : (\n                      <Annotation\n                        subject={centroid}\n                        dx={offsets[cur.id][0]}\n                        dy={offsets[cur.id][1]}\n                      >\n                        <text x={4} fontSize={14} alignmentBaseline=\"middle\">\n                          {cur.id}\n                        </text>\n                      </Annotation>\n                    ))}\n                </g>\n              );\n            })}\n          </>\n        )}\n      </Geographies>\n    </ComposableMap>\n  );\n};\n\nexport default Map;"]},"metadata":{},"sourceType":"module"}