{"ast":null,"code":"var _jsxFileName = \"/Users/lihing1994/Desktop/willitend.com-home/src/components/Map.js\",\n    _s = $RefreshSig$();\n\nimport allStates from \"./allstates.json\";\nimport './Map.css';\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport WillitendService from '../services/Willitend.service.js';\nimport { geoCentroid } from \"d3-geo\";\nimport { ComposableMap, Geographies, Geography, Marker, Annotation } from \"react-simple-maps\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst geoUrl = \"https://cdn.jsdelivr.net/npm/us-atlas@3/states-10m.json\";\nconst offsets = {\n  VT: [50, -8],\n  NH: [34, 2],\n  MA: [30, -1],\n  RI: [28, 2],\n  CT: [35, 10],\n  NJ: [34, 1],\n  DE: [33, 0],\n  MD: [47, 10],\n  DC: [49, 21]\n};\nconst map = {\n  \"Alabama\": \"AL\",\n  \"Alaska\": \"AK\",\n  \"American Samoa\": \"AS\",\n  \"Arizona\": \"AZ\",\n  \"Arkansas\": \"AR\",\n  \"Armed Forces Americas\": \"AA\",\n  \"Armed Forces Europe\": \"AE\",\n  \"Armed Forces Pacific\": \"AP\",\n  \"California\": \"CA\",\n  \"Colorado\": \"CO\",\n  \"Connecticut\": \"CT\",\n  \"Delaware\": \"DE\",\n  \"District Of Columbia\": \"DC\",\n  \"Florida\": \"FL\",\n  \"Georgia\": \"GA\",\n  \"Guam\": \"GU\",\n  \"Hawaii\": \"HI\",\n  \"Idaho\": \"ID\",\n  \"Illinois\": \"IL\",\n  \"Indiana\": \"IN\",\n  \"Iowa\": \"IA\",\n  \"Kansas\": \"KS\",\n  \"Kentucky\": \"KY\",\n  \"Louisiana\": \"LA\",\n  \"Maine\": \"ME\",\n  \"Marshall Islands\": \"MH\",\n  \"Maryland\": \"MD\",\n  \"Massachusetts\": \"MA\",\n  \"Michigan\": \"MI\",\n  \"Minnesota\": \"MN\",\n  \"Mississippi\": \"MS\",\n  \"Missouri\": \"MO\",\n  \"Montana\": \"MT\",\n  \"Nebraska\": \"NE\",\n  \"Nevada\": \"NV\",\n  \"New Hampshire\": \"NH\",\n  \"New Jersey\": \"NJ\",\n  \"New Mexico\": \"NM\",\n  \"New York\": \"NY\",\n  \"North Carolina\": \"NC\",\n  \"North Dakota\": \"ND\",\n  \"Northern Mariana Islands\": \"NP\",\n  \"Ohio\": \"OH\",\n  \"Oklahoma\": \"OK\",\n  \"Oregon\": \"OR\",\n  \"Pennsylvania\": \"PA\",\n  \"Puerto Rico\": \"PR\",\n  \"Rhode Island\": \"RI\",\n  \"South Carolina\": \"SC\",\n  \"South Dakota\": \"SD\",\n  \"Tennessee\": \"TN\",\n  \"Texas\": \"TX\",\n  \"US Virgin Islands\": \"VI\",\n  \"Utah\": \"UT\",\n  \"Vermont\": \"VT\",\n  \"Virginia\": \"VA\",\n  \"Washington\": \"WA\",\n  \"West Virginia\": \"WV\",\n  \"Wisconsin\": \"WI\",\n  \"Wyoming\": \"WY\"\n};\n\nconst Map = ({\n  setToolTipContent,\n  statesData\n}) => {\n  _s();\n\n  const [stateInfo, setStatInfo] = useState([]);\n  useEffect(() => {\n    getStateInfo();\n  }, load_data);\n\n  function load_data() {\n    WillitendService.getAllStateInfo().then(return_data => {\n      setStatInfo(return_data.data);\n    }).catch(err => alert(err));\n  }\n\n  const getStateInfo = temp_name => {\n    WillitendService.getAllStateInfo().then(return_data => {\n      setStatInfo(return_data.data);\n    }).catch(err => alert(err)); // Make sure stateInfo is not empty\n\n    if (stateInfo.length > 0) {\n      for (var i = 0; i < stateInfo.length; i++) {\n        if (stateInfo[i].name === temp_name) return stateInfo[i];\n      }\n    }\n  }; // Assign Color to difference states \n  // based on how many day to herd immunity\n\n\n  function getStateColor(id, name) {\n    if (stateInfo.length === 0) return \"#4db6ac\";else {\n      var temp_name = map[name];\n\n      for (var i = 0; i < stateInfo.length; i++) {\n        if (stateInfo.name == temp_name) {\n          if (stateInfo.hdays >= 100) return \"#4db6ac\";else if (stateInfo.hdays >= 80) return \"#009688\";else if (stateInfo.hdays >= 60) return \"00796b\";else if (stateInfo.hdays >= 40) return \"#004d40\";else return \"#b2dfdb\";\n        }\n      }\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(ComposableMap, {\n    \"data-tip\": \"\",\n    projection: \"geoAlbersUsa\",\n    children: /*#__PURE__*/_jsxDEV(Geographies, {\n      geography: geoUrl,\n      children: ({\n        geographies\n      }) => /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [geographies.map(geo => /*#__PURE__*/_jsxDEV(Geography, {\n          stroke: \"white\",\n          geography: geo,\n          fill: getStateColor(geo.id, geo.properties.name),\n          \"data-tip\": true,\n          \"data-for\": geo.id,\n          onMouseEnter: () => {\n            const name = geo.properties.name;\n            const id = geo.id;\n            const state_vacc_data = getStateInfo(map[name]);\n            {\n              console.log(state_vacc_data);\n            }\n            return setToolTipContent(`<h3>${name}</h3>\n                   <p style =\"display: inline;\"><h2 style = \"display: inline;\">${state_vacc_data.hdays} DAYS</h2>    to Herd Immunity</p>\n                   <p style =\"display: inline;\"><h2 style = \"display: inline;\">${state_vacc_data.firstShot} residents</h2>    receive their first shot</p>\n                   <p style =\"display: inline;\"><h2 style = \"display: inline;\">${state_vacc_data.secShot} residents</h2>    are fully vaccinated</p>\n                   <p style =\"display: inline;\"><h2 style = \"display: inline;\">${state_vacc_data.vacPerDay} residents</h2> are being vaccinated per day</p>\n                   `);\n          },\n          onMouseLeave: () => {\n            setToolTipContent(\"\");\n          },\n          style: {\n            hover: {\n              stroke: \"black\"\n            }\n          }\n        }, geo.rsmKey, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 14\n        }, this)), geographies.map(geo => {\n          const centroid = geoCentroid(geo);\n          const cur = allStates.find(s => s.val === geo.id);\n          return /*#__PURE__*/_jsxDEV(\"g\", {\n            children: cur && centroid[0] > -160 && centroid[0] < -67 && (Object.keys(offsets).indexOf(cur.id) === -1 ? /*#__PURE__*/_jsxDEV(Marker, {\n              coordinates: centroid,\n              children: /*#__PURE__*/_jsxDEV(\"text\", {\n                y: \"2\",\n                fontSize: 14,\n                textAnchor: \"middle\",\n                children: cur.id\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 186,\n                columnNumber: 25\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 185,\n              columnNumber: 23\n            }, this) : /*#__PURE__*/_jsxDEV(Annotation, {\n              subject: centroid,\n              dx: offsets[cur.id][0],\n              dy: offsets[cur.id][1],\n              children: /*#__PURE__*/_jsxDEV(\"text\", {\n                x: 4,\n                fontSize: 14,\n                alignmentBaseline: \"middle\",\n                children: cur.id\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 196,\n                columnNumber: 25\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 191,\n              columnNumber: 23\n            }, this))\n          }, geo.rsmKey + \"-name\", false, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 17\n          }, this);\n        })]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Map, \"wuFirWm0JpUxrH7ilk3KgxIbej8=\");\n\n_c = Map;\nexport default Map;\n\nvar _c;\n\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"sources":["/Users/lihing1994/Desktop/willitend.com-home/src/components/Map.js"],"names":["allStates","React","useState","useEffect","axios","WillitendService","geoCentroid","ComposableMap","Geographies","Geography","Marker","Annotation","geoUrl","offsets","VT","NH","MA","RI","CT","NJ","DE","MD","DC","map","Map","setToolTipContent","statesData","stateInfo","setStatInfo","getStateInfo","load_data","getAllStateInfo","then","return_data","data","catch","err","alert","temp_name","length","i","name","getStateColor","id","hdays","geographies","geo","properties","state_vacc_data","console","log","firstShot","secShot","vacPerDay","hover","stroke","rsmKey","centroid","cur","find","s","val","Object","keys","indexOf"],"mappings":";;;AAAA,OAAOA,SAAP,MAAsB,kBAAtB;AACA,OAAO,WAAP;AACA,OAAOC,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA0C,OAA1C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,gBAAP,MAA6B,kCAA7B;AACA,SAASC,WAAT,QAA4B,QAA5B;AACA,SACEC,aADF,EAEEC,WAFF,EAGEC,SAHF,EAIEC,MAJF,EAKEC,UALF,QAMO,mBANP;;;AAQA,MAAMC,MAAM,GAAG,yDAAf;AAEA,MAAMC,OAAO,GAAG;AACdC,EAAAA,EAAE,EAAE,CAAC,EAAD,EAAK,CAAC,CAAN,CADU;AAEdC,EAAAA,EAAE,EAAE,CAAC,EAAD,EAAK,CAAL,CAFU;AAGdC,EAAAA,EAAE,EAAE,CAAC,EAAD,EAAK,CAAC,CAAN,CAHU;AAIdC,EAAAA,EAAE,EAAE,CAAC,EAAD,EAAK,CAAL,CAJU;AAKdC,EAAAA,EAAE,EAAE,CAAC,EAAD,EAAK,EAAL,CALU;AAMdC,EAAAA,EAAE,EAAE,CAAC,EAAD,EAAK,CAAL,CANU;AAOdC,EAAAA,EAAE,EAAE,CAAC,EAAD,EAAK,CAAL,CAPU;AAQdC,EAAAA,EAAE,EAAE,CAAC,EAAD,EAAK,EAAL,CARU;AASdC,EAAAA,EAAE,EAAE,CAAC,EAAD,EAAK,EAAL;AATU,CAAhB;AAYA,MAAMC,GAAG,GAAG;AACV,aAAW,IADD;AAEV,YAAW,IAFD;AAGV,oBAAmB,IAHT;AAIV,aAAY,IAJF;AAKV,cAAa,IALH;AAMV,2BAA0B,IANhB;AAOV,yBAAwB,IAPd;AAQV,0BAAyB,IARf;AASV,gBAAe,IATL;AAUV,cAAa,IAVH;AAWV,iBAAgB,IAXN;AAYV,cAAa,IAZH;AAaV,0BAAyB,IAbf;AAcV,aAAY,IAdF;AAeV,aAAY,IAfF;AAgBV,UAAS,IAhBC;AAiBV,YAAW,IAjBD;AAkBV,WAAU,IAlBA;AAmBV,cAAa,IAnBH;AAoBV,aAAY,IApBF;AAqBV,UAAS,IArBC;AAsBV,YAAW,IAtBD;AAuBV,cAAa,IAvBH;AAwBV,eAAc,IAxBJ;AAyBV,WAAU,IAzBA;AA0BV,sBAAqB,IA1BX;AA2BV,cAAa,IA3BH;AA4BV,mBAAkB,IA5BR;AA6BV,cAAa,IA7BH;AA8BV,eAAc,IA9BJ;AA+BV,iBAAgB,IA/BN;AAgCV,cAAa,IAhCH;AAiCV,aAAY,IAjCF;AAkCV,cAAa,IAlCH;AAmCV,YAAW,IAnCD;AAoCV,mBAAkB,IApCR;AAqCV,gBAAe,IArCL;AAsCV,gBAAe,IAtCL;AAuCV,cAAa,IAvCH;AAwCV,oBAAmB,IAxCT;AAyCV,kBAAiB,IAzCP;AA0CV,8BAA6B,IA1CnB;AA2CV,UAAS,IA3CC;AA4CV,cAAa,IA5CH;AA6CV,YAAW,IA7CD;AA8CV,kBAAiB,IA9CP;AA+CV,iBAAgB,IA/CN;AAgDV,kBAAiB,IAhDP;AAiDV,oBAAmB,IAjDT;AAkDV,kBAAiB,IAlDP;AAmDV,eAAc,IAnDJ;AAoDV,WAAU,IApDA;AAqDV,uBAAsB,IArDZ;AAsDV,UAAS,IAtDC;AAuDV,aAAY,IAvDF;AAwDV,cAAa,IAxDH;AAyDV,gBAAe,IAzDL;AA0DV,mBAAkB,IA1DR;AA2DV,eAAc,IA3DJ;AA4DV,aAAY;AA5DF,CAAZ;;AAgEA,MAAMC,GAAG,GAAG,CAAC;AAAEC,EAAAA,iBAAF;AAAqBC,EAAAA;AAArB,CAAD,KAAuC;AAAA;;AACjD,QAAM,CAACC,SAAD,EAAYC,WAAZ,IAA2B1B,QAAQ,CAAC,EAAD,CAAzC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd0B,IAAAA,YAAY;AACb,GAFQ,EAENC,SAFM,CAAT;;AAMA,WAASA,SAAT,GAAoB;AAClBzB,IAAAA,gBAAgB,CAAC0B,eAAjB,GACCC,IADD,CACMC,WAAW,IAAG;AAClBL,MAAAA,WAAW,CAACK,WAAW,CAACC,IAAb,CAAX;AACD,KAHD,EAGGC,KAHH,CAGSC,GAAG,IAAGC,KAAK,CAACD,GAAD,CAHpB;AAID;;AACD,QAAMP,YAAY,GAAIS,SAAD,IAAe;AAClCjC,IAAAA,gBAAgB,CAAC0B,eAAjB,GACCC,IADD,CACMC,WAAW,IAAG;AAClBL,MAAAA,WAAW,CAACK,WAAW,CAACC,IAAb,CAAX;AACD,KAHD,EAGGC,KAHH,CAGSC,GAAG,IAAGC,KAAK,CAACD,GAAD,CAHpB,EADkC,CAKlC;;AACA,QAAGT,SAAS,CAACY,MAAV,GAAiB,CAApB,EAAsB;AACpB,WAAI,IAAIC,CAAC,GAAE,CAAX,EAAaA,CAAC,GAACb,SAAS,CAACY,MAAzB,EAAgCC,CAAC,EAAjC,EAAoC;AAClC,YAAGb,SAAS,CAACa,CAAD,CAAT,CAAaC,IAAb,KAAsBH,SAAzB,EAAoC,OAAOX,SAAS,CAACa,CAAD,CAAhB;AACrC;AACF;AACF,GAXD,CAfiD,CA4BnD;AACA;;;AACA,WAASE,aAAT,CAAwBC,EAAxB,EAA4BF,IAA5B,EAAkC;AAChC,QAAGd,SAAS,CAACY,MAAV,KAAqB,CAAxB,EAA2B,OAAO,SAAP,CAA3B,KACI;AACF,UAAID,SAAS,GAAGf,GAAG,CAACkB,IAAD,CAAnB;;AACA,WAAI,IAAID,CAAC,GAAE,CAAX,EAAaA,CAAC,GAACb,SAAS,CAACY,MAAzB,EAAgCC,CAAC,EAAjC,EAAoC;AAClC,YAAGb,SAAS,CAACc,IAAV,IAAkBH,SAArB,EAA+B;AAC7B,cAAGX,SAAS,CAACiB,KAAV,IAAmB,GAAtB,EAA2B,OAAO,SAAP,CAA3B,KACK,IAAGjB,SAAS,CAACiB,KAAV,IAAmB,EAAtB,EAA2B,OAAO,SAAP,CAA3B,KACA,IAAGjB,SAAS,CAACiB,KAAV,IAAmB,EAAtB,EAA2B,OAAO,QAAP,CAA3B,KACA,IAAGjB,SAAS,CAACiB,KAAV,IAAmB,EAAtB,EAA2B,OAAO,SAAP,CAA3B,KACA,OAAO,SAAP;AACN;AACF;AACF;AACF;;AACC,sBACE,QAAC,aAAD;AAAe,gBAAU,EAAzB;AAA4B,IAAA,UAAU,EAAC,cAAvC;AAAA,2BACE,QAAC,WAAD;AAAa,MAAA,SAAS,EAAEhC,MAAxB;AAAA,gBACG,CAAC;AAAEiC,QAAAA;AAAF,OAAD,kBACC;AAAA,mBACGA,WAAW,CAACtB,GAAZ,CAAgBuB,GAAG,iBAEnB,QAAC,SAAD;AAEG,UAAA,MAAM,EAAC,OAFV;AAGG,UAAA,SAAS,EAAEA,GAHd;AAKG,UAAA,IAAI,EAAIJ,aAAa,CAACI,GAAG,CAACH,EAAL,EAASG,GAAG,CAACC,UAAJ,CAAeN,IAAxB,CALxB;AAMG,0BANH;AAMY,sBAAUK,GAAG,CAACH,EAN1B;AAOG,UAAA,YAAY,EAAK,MAAM;AAErB,kBAAMF,IAAI,GAAGK,GAAG,CAACC,UAAJ,CAAeN,IAA5B;AACA,kBAAME,EAAE,GAAGG,GAAG,CAACH,EAAf;AACA,kBAAMK,eAAe,GAAGnB,YAAY,CAACN,GAAG,CAACkB,IAAD,CAAJ,CAApC;AACA;AAACQ,cAAAA,OAAO,CAACC,GAAR,CAAYF,eAAZ;AAA6B;AAC9B,mBACAvB,iBAAiB,CAAE,OAAMgB,IAAK;AAChD,iFAAiFO,eAAe,CAACJ,KAAM;AACvG,iFAAiFI,eAAe,CAACG,SAAU;AAC3G,iFAAiFH,eAAe,CAACI,OAAQ;AACzG,iFAAiFJ,eAAe,CAACK,SAAU;AAC3G,oBALmC,CADjB;AAOD,WApBJ;AAqBG,UAAA,YAAY,EAAK,MAAK;AACpB5B,YAAAA,iBAAiB,CAAC,EAAD,CAAjB;AACD,WAvBJ;AAwBG,UAAA,KAAK,EAAE;AACH6B,YAAAA,KAAK,EAAE;AACLC,cAAAA,MAAM,EAAE;AADH;AADJ;AAxBV,WACQT,GAAG,CAACU,MADZ;AAAA;AAAA;AAAA;AAAA,gBAFA,CADH,EAkCGX,WAAW,CAACtB,GAAZ,CAAgBuB,GAAG,IAAI;AACtB,gBAAMW,QAAQ,GAAGnD,WAAW,CAACwC,GAAD,CAA5B;AACA,gBAAMY,GAAG,GAAG1D,SAAS,CAAC2D,IAAV,CAAeC,CAAC,IAAIA,CAAC,CAACC,GAAF,KAAUf,GAAG,CAACH,EAAlC,CAAZ;AACA,8BACE;AAAA,sBACGe,GAAG,IACFD,QAAQ,CAAC,CAAD,CAAR,GAAc,CAAC,GADhB,IAECA,QAAQ,CAAC,CAAD,CAAR,GAAc,CAAC,EAFhB,KAGEK,MAAM,CAACC,IAAP,CAAYlD,OAAZ,EAAqBmD,OAArB,CAA6BN,GAAG,CAACf,EAAjC,MAAyC,CAAC,CAA1C,gBACC,QAAC,MAAD;AAAQ,cAAA,WAAW,EAAEc,QAArB;AAAA,qCACE;AAAM,gBAAA,CAAC,EAAC,GAAR;AAAY,gBAAA,QAAQ,EAAE,EAAtB;AAA0B,gBAAA,UAAU,EAAC,QAArC;AAAA,0BACGC,GAAG,CAACf;AADP;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,oBADD,gBAOC,QAAC,UAAD;AACE,cAAA,OAAO,EAAEc,QADX;AAEE,cAAA,EAAE,EAAE5C,OAAO,CAAC6C,GAAG,CAACf,EAAL,CAAP,CAAgB,CAAhB,CAFN;AAGE,cAAA,EAAE,EAAE9B,OAAO,CAAC6C,GAAG,CAACf,EAAL,CAAP,CAAgB,CAAhB,CAHN;AAAA,qCAKE;AAAM,gBAAA,CAAC,EAAE,CAAT;AAAY,gBAAA,QAAQ,EAAE,EAAtB;AAA0B,gBAAA,iBAAiB,EAAC,QAA5C;AAAA,0BACGe,GAAG,CAACf;AADP;AAAA;AAAA;AAAA;AAAA;AALF;AAAA;AAAA;AAAA;AAAA,oBAVH;AADH,aAAQG,GAAG,CAACU,MAAJ,GAAa,OAArB;AAAA;AAAA;AAAA;AAAA,kBADF;AAwBD,SA3BA,CAlCH;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAuED,CApHD;;GAAMhC,G;;KAAAA,G;AAsHN,eAAeA,GAAf","sourcesContent":["import allStates from \"./allstates.json\";\nimport './Map.css';\nimport React, { useState ,useEffect} from 'react';\nimport axios from 'axios';\nimport WillitendService from '../services/Willitend.service.js';\nimport { geoCentroid } from \"d3-geo\";\nimport {\n  ComposableMap,\n  Geographies,\n  Geography,\n  Marker,\n  Annotation\n} from \"react-simple-maps\";\n\nconst geoUrl = \"https://cdn.jsdelivr.net/npm/us-atlas@3/states-10m.json\";\n\nconst offsets = {\n  VT: [50, -8],\n  NH: [34, 2],\n  MA: [30, -1],\n  RI: [28, 2],\n  CT: [35, 10],\n  NJ: [34, 1],\n  DE: [33, 0],\n  MD: [47, 10],\n  DC: [49, 21]\n};\n\nconst map = {\n  \"Alabama\": \"AL\",\n  \"Alaska\" : \"AK\",\n  \"American Samoa\" : \"AS\",\n  \"Arizona\" : \"AZ\",\n  \"Arkansas\" : \"AR\",\n  \"Armed Forces Americas\" : \"AA\",\n  \"Armed Forces Europe\" : \"AE\",\n  \"Armed Forces Pacific\" : \"AP\",\n  \"California\" : \"CA\",\n  \"Colorado\" : \"CO\",\n  \"Connecticut\" : \"CT\",\n  \"Delaware\" : \"DE\",\n  \"District Of Columbia\" : \"DC\",\n  \"Florida\" : \"FL\",\n  \"Georgia\" : \"GA\",\n  \"Guam\" : \"GU\",\n  \"Hawaii\" : \"HI\",\n  \"Idaho\" : \"ID\",\n  \"Illinois\" : \"IL\",\n  \"Indiana\" : \"IN\",\n  \"Iowa\" : \"IA\",\n  \"Kansas\" : \"KS\",\n  \"Kentucky\" : \"KY\",\n  \"Louisiana\" : \"LA\",\n  \"Maine\" : \"ME\",\n  \"Marshall Islands\" : \"MH\",\n  \"Maryland\" : \"MD\",\n  \"Massachusetts\" : \"MA\",\n  \"Michigan\" : \"MI\",\n  \"Minnesota\" : \"MN\",\n  \"Mississippi\" : \"MS\",\n  \"Missouri\" : \"MO\",\n  \"Montana\" : \"MT\",\n  \"Nebraska\" : \"NE\",\n  \"Nevada\" : \"NV\",\n  \"New Hampshire\" : \"NH\",\n  \"New Jersey\" : \"NJ\",\n  \"New Mexico\" : \"NM\",\n  \"New York\" : \"NY\",\n  \"North Carolina\" : \"NC\",\n  \"North Dakota\" : \"ND\",\n  \"Northern Mariana Islands\" : \"NP\",\n  \"Ohio\" : \"OH\",\n  \"Oklahoma\" : \"OK\",\n  \"Oregon\" : \"OR\",\n  \"Pennsylvania\" : \"PA\",\n  \"Puerto Rico\" : \"PR\",\n  \"Rhode Island\" : \"RI\",\n  \"South Carolina\" : \"SC\",\n  \"South Dakota\" : \"SD\",\n  \"Tennessee\" : \"TN\",\n  \"Texas\" : \"TX\",\n  \"US Virgin Islands\" : \"VI\",\n  \"Utah\" : \"UT\",\n  \"Vermont\" : \"VT\",\n  \"Virginia\" : \"VA\",\n  \"Washington\" : \"WA\",\n  \"West Virginia\" : \"WV\",\n  \"Wisconsin\" : \"WI\",\n  \"Wyoming\" : \"WY\"\n}\n\n\nconst Map = ({ setToolTipContent, statesData }) => { \n  const [stateInfo, setStatInfo] = useState([]);\n\n  useEffect(() => {\n    getStateInfo();\n  }, load_data);\n  \n\n\n  function load_data(){\n    WillitendService.getAllStateInfo()\n    .then(return_data =>{\n      setStatInfo(return_data.data)\n    }).catch(err=> alert(err));\n  }\n  const getStateInfo = (temp_name) => {\n    WillitendService.getAllStateInfo()\n    .then(return_data =>{\n      setStatInfo(return_data.data)\n    }).catch(err=> alert(err));\n    // Make sure stateInfo is not empty\n    if(stateInfo.length>0){\n      for(var i =0;i<stateInfo.length;i++){\n        if(stateInfo[i].name === temp_name) return stateInfo[i];\n      }\n    }\n  };\n  \n// Assign Color to difference states \n// based on how many day to herd immunity\nfunction getStateColor (id, name) {\n  if(stateInfo.length === 0) return \"#4db6ac\";\n  else{\n    var temp_name = map[name];\n    for(var i =0;i<stateInfo.length;i++){\n      if(stateInfo.name == temp_name){\n        if(stateInfo.hdays >= 100 )return \"#4db6ac\";\n        else if(stateInfo.hdays >= 80 ) return \"#009688\";\n        else if(stateInfo.hdays >= 60 ) return \"00796b\";\n        else if(stateInfo.hdays >= 40 ) return \"#004d40\";\n        else return \"#b2dfdb\";\n      }\n    }\n  }\n}\n  return (\n    <ComposableMap data-tip =\"\" projection=\"geoAlbersUsa\">\n      <Geographies geography={geoUrl}>\n        {({ geographies }) => (\n          <>\n            {geographies.map(geo => (\n             \n             <Geography\n                key={geo.rsmKey}\n                stroke=\"white\"\n                geography={geo}\n\n                fill = {getStateColor(geo.id, geo.properties.name)}\n                data-tip data-for={geo.id}\n                onMouseEnter = { () => {\n\n                  const name = geo.properties.name; \n                  const id = geo.id;\n                  const state_vacc_data = getStateInfo(map[name]);\n                  {console.log(state_vacc_data)} \n                  return (\n                  setToolTipContent(`<h3>${name}</h3>\n                   <p style =\"display: inline;\"><h2 style = \"display: inline;\">${state_vacc_data.hdays} DAYS</h2>    to Herd Immunity</p>\n                   <p style =\"display: inline;\"><h2 style = \"display: inline;\">${state_vacc_data.firstShot} residents</h2>    receive their first shot</p>\n                   <p style =\"display: inline;\"><h2 style = \"display: inline;\">${state_vacc_data.secShot} residents</h2>    are fully vaccinated</p>\n                   <p style =\"display: inline;\"><h2 style = \"display: inline;\">${state_vacc_data.vacPerDay} residents</h2> are being vaccinated per day</p>\n                   `));\n                }}\n                onMouseLeave = { () =>{\n                  setToolTipContent(\"\");\n                }}\n                style={{\n                    hover: {\n                      stroke: \"black\"\n                    }\n                  }}\n              />\n            ))}\n            {geographies.map(geo => {\n              const centroid = geoCentroid(geo);\n              const cur = allStates.find(s => s.val === geo.id);\n              return (\n                <g key={geo.rsmKey + \"-name\"}>\n                  {cur &&\n                    centroid[0] > -160 &&\n                    centroid[0] < -67 &&\n                    (Object.keys(offsets).indexOf(cur.id) === -1 ? (\n                      <Marker coordinates={centroid}>\n                        <text y=\"2\" fontSize={14} textAnchor=\"middle\">\n                          {cur.id}\n                        </text>\n                      </Marker>\n                    ) : (\n                      <Annotation\n                        subject={centroid}\n                        dx={offsets[cur.id][0]}\n                        dy={offsets[cur.id][1]}\n                      >\n                        <text x={4} fontSize={14} alignmentBaseline=\"middle\">\n                          {cur.id}\n                        </text>\n                      </Annotation>\n                    ))}\n                </g>\n              );\n            })}\n          </>\n        )}\n      </Geographies>\n    </ComposableMap>\n  );\n};\n\nexport default Map;"]},"metadata":{},"sourceType":"module"}