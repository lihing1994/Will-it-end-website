{"ast":null,"code":"var _jsxFileName = \"/Users/lihing1994/Desktop/willitend.com-home/src/components/Textfield.js\",\n    _s = $RefreshSig$();\n\nimport Paper from '@material-ui/core/Paper';\nimport React from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport StateService from './StateService.js';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles({\n  table: {\n    width: '100%',\n    display: 'grid',\n    justifyContent: 'center',\n    alignItems: 'center'\n  }\n});\nexport default function Textfield(props) {\n  _s();\n\n  const classes = useStyles();\n  const state = props.place;\n  const statesData = props.statesData;\n  const rows = [createData(state, '1', 'Days to Herd Immunity', '---'), createData(state, '2', 'Vaccinations Per Day', '---'), createData(state, '3', 'Citizens Currently Vaccinated (Fully)', '---'), createData(state, '4', 'Citizens Currently Vaccinated (Partially)', '---')];\n\n  function createData(state, rowId, measurement, result) {\n    /* simple edge case for demo w/ hard coded */\n    if (state === 'CA') {\n      result = 14;\n      return {\n        measurement,\n        result\n      };\n    } else if (state === \"\") {\n      result = \"NaN\";\n      return {\n        measurement,\n        result\n      };\n    } else {\n      /* iterate over the statesData and find the data for a particular state and populate using rowId */\n\n      /* for now simply add the hardcoded data using id */\n      if (rowId === '1') {\n        result = statesData.herdImmunityDays;\n      } else if (rowId === '2') {\n        result = statesData.vaccPerDay;\n      } else if (rowId === '3') {\n        result = statesData.fullVac;\n      } else {\n        result = statesData.partialVac;\n      }\n\n      return {\n        measurement,\n        result\n      };\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(TableContainer, {\n    component: Paper,\n    children: /*#__PURE__*/_jsxDEV(Table, {\n      className: classes.table,\n      \"aria-label\": \"COVID-19 Vaccine Results Table\",\n      children: [/*#__PURE__*/_jsxDEV(TableHead, {\n        children: [state !== \"\" && /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: [\"Vaccine Results for \", state]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this), state === \"\" && /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Vaccine Results\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n        children: rows.map(row => /*#__PURE__*/_jsxDEV(TableRow, {\n          children: [/*#__PURE__*/_jsxDEV(TableCell, {\n            component: \"th\",\n            scope: \"row\",\n            children: row.measurement\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            align: \"right\",\n            children: row.result\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 15\n          }, this)]\n        }, row.measurement, true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Textfield, \"8g5FPXexvSEOsxdmU7HicukHGqY=\", false, function () {\n  return [useStyles];\n});\n\n_c = Textfield;\n\nvar _c;\n\n$RefreshReg$(_c, \"Textfield\");","map":{"version":3,"sources":["/Users/lihing1994/Desktop/willitend.com-home/src/components/Textfield.js"],"names":["Paper","React","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","StateService","makeStyles","useStyles","table","width","display","justifyContent","alignItems","Textfield","props","classes","state","place","statesData","rows","createData","rowId","measurement","result","herdImmunityDays","vaccPerDay","fullVac","partialVac","map","row"],"mappings":"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","sourcesContent":["import Paper from '@material-ui/core/Paper';\nimport React from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport StateService from './StateService.js';\nimport { makeStyles } from '@material-ui/core/styles';\nconst useStyles = makeStyles({\n  table: {\n    width: '100%',\n    display: 'grid', \n    justifyContent: 'center', \n    alignItems: 'center',\n  }\n});\n\nexport default function Textfield (props) {\n  const classes = useStyles();\n\n  const state = props.place; \n  const statesData = props.statesData;\n\n  const rows = [\n  createData(state, '1', 'Days to Herd Immunity', '---'),\n  createData(state, '2', 'Vaccinations Per Day', '---'),\n  createData(state, '3', 'Citizens Currently Vaccinated (Fully)', '---'),\n  createData(state, '4', 'Citizens Currently Vaccinated (Partially)', '---'),\n];\n\nfunction createData(state, rowId, measurement, result) {\n\n  /* simple edge case for demo w/ hard coded */ \n  if (state === 'CA') {\n    result = 14; \n    return {measurement, result};\n  } else if (state === \"\") {\n\n    result = \"NaN\"; \n    return {measurement, result};\n  } else {\n  /* iterate over the statesData and find the data for a particular state and populate using rowId */ \n  /* for now simply add the hardcoded data using id */ \n      if (rowId === '1') {\n        result = statesData.herdImmunityDays; \n      } else if (rowId === '2') {\n        result = statesData.vaccPerDay; \n      } else if (rowId === '3') {\n        result = statesData.fullVac; \n      } else {\n        result = statesData.partialVac; \n      }\n\n  return {measurement, result}; \n  }\n}\n\n  return (\n    <TableContainer component = {Paper}>\n      <Table className={classes.table} aria-label=\"COVID-19 Vaccine Results Table\">\n        <TableHead>\n        {state !== \"\" && \n          <h4>Vaccine Results for {state}</h4>\n        }\n        {state === \"\" &&\n          <h3>Vaccine Results</h3>\n        }\n        </TableHead>\n        <TableBody>\n          {rows.map((row) => (\n            <TableRow key={row.measurement}>\n              <TableCell component=\"th\" scope=\"row\">\n                {row.measurement}\n              </TableCell>\n              <TableCell align=\"right\">{row.result}</TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n}"]},"metadata":{},"sourceType":"module"}